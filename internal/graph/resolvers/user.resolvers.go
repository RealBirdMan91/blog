package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.81

import (
	"context"
	"fmt"

	"github.com/RealBirdMan91/blog/internal/graph/model"
)

// Signup is the resolver for the signup field.
func (r *mutationResolver) Signup(ctx context.Context, input model.CreateUserInput) (*model.User, error) {
	email := input.Email
	pass := input.Password
	avatar := ""
	if input.Avatar != nil {
		avatar = *input.Avatar
	}
	u, err := r.UserService.Register(ctx, email, pass, avatar)
	if err != nil {
		return nil, err
	}
	var gqlAvatar *string
	if !u.Avatar().IsZero() {
		s := u.Avatar().String()
		gqlAvatar = &s
	}
	return &model.User{
		ID:     u.ID().String(),
		Email:  u.Email().String(),
		Avatar: gqlAvatar,
	}, nil
}

// Signin is the resolver for the signin field.
func (r *mutationResolver) Signin(ctx context.Context, email string, password string) (string, error) {
	token, err := r.AuthService.Login(ctx, email, password)
	if err != nil {
		return "", err
	}
	return token, nil
}

// Health is the resolver for the health field.
func (r *queryResolver) Health(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: Health - health"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
